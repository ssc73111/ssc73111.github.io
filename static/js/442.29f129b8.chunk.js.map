{"version":3,"file":"static/js/442.29f129b8.chunk.js","mappings":"mOAiBIA,EAAKC,EAAAA,GAAAA,IAAH,uCAIFC,EAAKD,EAAAA,GAAAA,GAAH,gEAEQ,SAAAE,GAAK,OAAIA,EAAMC,gBA6J7B,SAASC,EAAWF,GAQhB,OALAG,EAAAA,EAAAA,YAAU,WACNH,EAAMI,sBAAqB,MAIL,IAAtBJ,EAAMK,aACC,wGAEoB,IAAtBL,EAAMK,aACJ,oEAEoB,IAAtBL,EAAMK,aACJ,0EADN,EAKT,SAASC,EAAON,GACZ,OAAQ,4BACJ,SAACO,EAAD,CAAQ,eAAIP,EAAMQ,4BAClB,SAACC,EAAD,CAAQ,eAAIT,EAAMU,8BAI1B,SAASH,EAAOP,GAEZ,OADAG,EAAAA,EAAAA,YAAU,WAAQQ,QAAQC,IAAI,6BACtB,oCAYZ,IAAIH,GAASI,EAAAA,EAAAA,OAAK,WAId,OAHAV,EAAAA,EAAAA,YAAU,WACNQ,QAAQC,IAAI,6BAER,uCAIZ,SAASE,EAAWd,GAChBW,QAAQC,IAAI,wBAAyBZ,EAAMe,gBAG3C,IAAIC,GAAcC,EAAAA,EAAAA,YAAWC,EAAAA,GAC7B,OAGI,2CAASF,EAAYhB,EAAMmB,QAcnC,WAAeC,EAAAA,EAAAA,KATf,SAAoBC,GAChB,MAAO,CACHA,MAAOA,EAAMC,WAOrB,EArNA,SAAgBtB,GAGZ,OAA0CuB,EAAAA,EAAAA,WAAS,GAAnD,eAAKC,EAAL,KAAmBC,EAAnB,KAEA,GAAiCF,EAAAA,EAAAA,UAAS,IAA1C,eAAKG,EAAL,KAAgBC,EAAhB,KAGA,GAAuCJ,EAAAA,EAAAA,UAAS,GAAhD,eAAKlB,EAAL,KAAkBuB,EAAlB,KAGA,GAA6CL,EAAAA,EAAAA,WAAS,GAAtD,eAAKM,EAAL,KAAqBzB,EAArB,MAIAD,EAAAA,EAAAA,YAAU,WACNQ,QAAQC,IAAI,0BAmBZ,IAAIkB,EAAsBC,YAAW,WAAQN,GAAoB,KAAU,KAG3E,OAAO,WAAQO,aAAaF,MAC7B,CAACN,IAMJ,IAAMS,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,EAAiBnC,EAAMoC,MAAMC,MAC7B,SAAUC,GACN,OAAOA,EAAQL,IAAMA,KAIzBM,EAAQvC,EAAMe,eAAekB,GACjCtB,QAAQC,IAAI,YAAa2B,GAGzB,IAAIC,GAAUC,EAAAA,EAAAA,MAEd,OACI,iBAAKC,UAAU,YAAf,WACI,SAAC,EAAD,WACI,UAAC,EAAD,CAAIA,UAAU,MAAd,4CAA2BT,QAI/B,kBAAOU,SAAU,SAACC,GAAQjB,EAAciB,EAAEC,OAAOC,UAEhDpB,GAIoB,IAAjBF,GACI,gBAAKkB,UAAU,iBAAf,UACI,uDAEJ,MAGR,iBAAKA,UAAU,MAAf,WACI,gBAAKA,UAAU,WAAf,UACI,gBAAKK,IAAKZ,EAAea,SAG7B,iBAAKN,UAAU,gBAAf,WAEI,eAAIA,UAAU,OAAd,SAAsBP,EAAec,SACrC,uBAAId,EAAee,WACnB,yBAAIf,EAAegB,MAAnB,aAECxC,QAAQC,IAAI,sBAAuBZ,EAAMe,iBAC1C,SAACD,EAAD,CAAYC,eAAgBwB,EAAOpB,IAAKc,KAExC,mBAAQS,UAAU,iBAAiBU,QAAS,WAIxCpD,EAAMqD,SAAS,CACXC,KAAM,2BACNC,QAAS,CAAEtB,GAAIE,EAAeF,GAAIuB,KAAMrB,EAAec,MAAOQ,KAAM,EAAGN,MAAOhB,EAAegB,SAIjGX,EAAQkB,KAAK,UAVjB,sCATJ,QAyBI,mBAAQhB,UAAU,iBAAiBU,QAAS,WACxCZ,EAAQmB,UADZ,6CAUR,UAAC,IAAD,CAAKjB,UAAU,OAAOkB,QAAQ,OAAOC,iBAAiB,SAAtD,WACI,SAAC,SAAD,WACI,SAAC,SAAD,CAAUC,SAAS,SAASV,QAAS,WAAQhD,GAAqB,GAAQwB,EAAkB,IAA5F,yCAEJ,SAAC,SAAD,WACI,SAAC,SAAD,CAAUkC,SAAS,SAASV,QAAS,WAAQhD,GAAqB,GAAQwB,EAAkB,IAA5F,6BAEJ,SAAC,SAAD,WACI,SAAC,SAAD,CAAUkC,SAAS,SAASV,QAAS,WAAQhD,GAAqB,GAAQwB,EAAkB,IAA5F,gCAKR,SAAC,IAAD,CAAemC,GAAIlC,EAAgBmC,WAAW,SAASC,QAAS,IAAhE,UAEI,SAAC/D,EAAD,CAAYG,YAAaA,EAAaD,qBAAsBA,OAIhE,SAACE,EAAD,CAAQ,2BAAK,4BAAQ,2BAAK","sources":["Detail.js"],"sourcesContent":["\nimport React, { useEffect, useState, useContext, memo } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\n// 추가 CSS를 미리 입혀놓은 컴포넌트 \nimport styled from 'styled-components';\nimport './Detail.scss';\nimport { remainContext } from './App';\n\n// 70-0) css 추가\nimport { Nav } from 'react-bootstrap';\n\n// css 를 천천히 바꿔주는 역할하는 라이브러리\nimport { CSSTransition } from 'react-transition-group';\n\n// 101-5) connect import \nimport { connect } from 'react-redux';\n\nlet 박스 = styled.div`\npadding:20px;\n`;\n\nlet 제목 = styled.h4`\n    font-size : 25px;\n    color : ${props => props.색상}\n`;\n\n// // 라이프사이클에 따른 훅 설정\n// class DetailCompo extends React.Component {\n//     componentDidMount() {\n\n//     }\n\n//     componentWillUnmount() {\n\n//     }\n// }\n\nfunction Detail(props) {\n\n    // 11-1) 보이거나 안보이게 하는 상태값 저장 변수 생성 \n    let [alertSoldOut, alertSoldOutVisible] = useState(true);\n    // 12-1) 라이프사이클 테스트 용 상태값변경 변수\n    let [inputText, inputTextSave] = useState('');\n\n    // 70-3) 탭 번호 설정\n    let [selTabIndex, changeSelTabIndex] = useState(0);\n\n    // 70-6) 탭 애니메이션 동작 시작 여부\n    let [selTabAniStart, selTabAniStartChange] = useState(false)\n\n\n    // 라이프사이클 훅 (컴포넌트가 마운트 되었을때 컴포넌트가 업데이트 될때 특정 코드를 실행 할수 있음)\n    useEffect(() => {\n        console.log('detail page, useEffect');\n        // 2초 후에 안보이게 하기 (변수에 적용)\n        // let 타이머 = setTimeout(() => { }, 2000);\n\n        // 10-1) function 만들거나\n        // return function detailHide() { };\n\n        // 10-2) 축소 function 으로 만들거나\n        // return () => { }\n\n        // 12-4) 업데이트 될때마다 useEffect(()=>{실행할 코드}) 실행 된다. 자원낭비. 그래서 조건을 설정한다. useEffect(()=>{실행할 코드},[조건])\n        // 조건-> useState() 변경될때만 실행하도록 조건으로 설정.\n\n\n        // 40-1) 페이지 첫 로딩시에만 서버에 데이터 요청할때, 조건은 비워둘것. (화면 업데이트시 요청 하지 않도록)\n        // axios.get(URL);\n        // useEffect(()=>{},[]); 조건을 빈칸으로.\n\n        // 11-3) 표시 여부 상태값 변경\n        let soldOutVisibleTimer = setTimeout(() => { alertSoldOutVisible(false) }, 2000);\n\n        // 12-5) 타이머같은 경우 설정값이 지나기 전에 페이지가 바뀌면 에러 있음, 반드시 해제해줘야한다.\n        return () => { clearTimeout(soldOutVisibleTimer) }\n    }, [alertSoldOut]);\n\n\n    // 10-3) 실행할것이 많을때는 useEffect(); 여러개 만들어 써도 됨, 위에서부터 차례대로 실행됨\n    // useEffect(() => { });\n\n    let { id } = useParams();\n    let clickedProduct = props.stuff.find(\n        function (product) {\n            return product.id == id;\n        }\n    );\n\n    let count = props.stuffLeftCount[id];\n    console.log(\"count: %d\", count)\n\n    // 뒤로가기 \n    let history = useHistory();\n\n    return (\n        <div className='container'>\n            <박스>\n                <제목 className='red'>상세페이지 {id}</제목>\n            </박스>\n\n            {/* 12-2) 라이프사이클 테스트 */}\n            <input onChange={(e) => { inputTextSave(e.target.value) }} />\n            {/* 12-3) input 에 입력 되는 이벤트가 발생할때마다 업데이트 실행됨 */}\n            {inputText}\n\n            {\n                // 11-2) 삼항연산자 사용하여 if 대신 실행\n                alertSoldOut === true ? (\n                    <div className=\"alert-sold-out\">\n                        <p>残り僅か!</p>\n                    </div>\n                ) : null // 아무것도 표시 하지 않을때는 null \n            }\n\n            <div className='row'>\n                <div className='col-md-6'>\n                    <img src={clickedProduct.img} />\n                </div>\n\n                <div className='col-md-6 mt-4'>\n\n                    <h4 className='pt-5'>{clickedProduct.title}</h4>\n                    <p>{clickedProduct.content}</p>\n                    <p>{clickedProduct.price} 원</p>\n\n                    {console.log(\"stuffLeftCount:: %d\", props.stuffLeftCount)}\n                    <RemainInfo stuffLeftCount={count} idx={id} ></RemainInfo>\n\n                    <button className='btn btn-danger' onClick={() => {\n                        // 40-3) state 사본 만들고, 사본 변경 후 사본을 변경함수에 집어 넣는다.\n\n                        // 101-6) redux 요청, {} 안의 내용이 모두 action 으로 된다. \n                        props.dispatch({\n                            type: '항목추가',\n                            payload: { id: clickedProduct.id, name: clickedProduct.title, quan: 1, price: clickedProduct.price }\n                        })\n\n                        // 101-7) 페이지 강제 이동\n                        history.push('/cart')\n\n                    }}>\n                        주문하기\n                    </button>\n                    &nbsp;\n                    <button className='btn btn-danger' onClick={() => {\n                        history.goBack();\n                        // history.push('/')\n                    }}>\n                        뒤로가기\n                    </button>\n                </div>\n            </div>\n\n            {/* 70-1) tab 기능 만들기 */}\n            <Nav className=\"mt-5\" variant=\"tabs\" defaultActiveKey=\"link-0\">\n                <Nav.Item>\n                    <Nav.Link eventKey=\"link-0\" onClick={() => { selTabAniStartChange(false); changeSelTabIndex(0); }}>제품상세</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                    <Nav.Link eventKey=\"link-1\" onClick={() => { selTabAniStartChange(false); changeSelTabIndex(1); }}>문의</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                    <Nav.Link eventKey=\"link-2\" onClick={() => { selTabAniStartChange(false); changeSelTabIndex(2); }}>후기</Nav.Link>\n                </Nav.Item>\n            </Nav>\n\n            {/* 70-3) 애니메이션 동작 스위치, 클래스이름, 적용될 시간 */}\n            <CSSTransition in={selTabAniStart} classNames=\"tabani\" timeout={500}>\n                {/* 70-2) tab 기능 만들기 - 탭 클릭시 변경될 화면*/}\n                <TabContent selTabIndex={selTabIndex} selTabAniStartChange={selTabAniStartChange}></TabContent>\n            </CSSTransition>\n\n\n            <Parent 첫째아이=\"첫째 바뀜\" 둘째아이=\"둘째 바뀜\"></Parent>\n        </div >\n    );\n}\n\n\nfunction TabContent(props) {\n\n    // 컴포넌트가 로딩되면서 훅이 실행되면서 탭 이벤트 변경\n    useEffect(() => {\n        props.selTabAniStartChange(true);\n    });\n\n\n    if (props.selTabIndex === 0) {\n        return <div>제품상세 제품상세 제품상세</div>\n    }\n    else if (props.selTabIndex === 1) {\n        return <div>문의 문의 문의</div>\n    }\n    else if (props.selTabIndex === 2) {\n        return <div>후기 후기 후기 </div>\n    }\n}\n\nfunction Parent(props) {\n    return (<div>\n        <Child1 아이={props.첫째아이}></Child1>\n        <Child2 아이={props.둘째아이}></Child2>\n    </div>)\n}\n\nfunction Child1(props) {\n    useEffect(() => { console.log('rendering 1 complete.') })\n    return (<div>\n        Child1\n    </div>)\n}\n\n// 106-4) react 에서 memo() 를 사용하면 불필요한 재렌더링 막기 가능함. 1) react 에서 import {memo} 2) memo() 컴포넌트 감싸기. 3) 컴포넌트와 관련된 props 가 변경이 될때만 재렌더링 됨.\n// function Child2(props) {\n//     useEffect(() => { console.log('rendering 2 complete.') })\n//     return (<div>\n//         Child2\n//     </div>)\n// }\nlet Child2 = memo(function () {\n    useEffect(() => {\n        console.log('rendering 2 complete.');\n    });\n    return (<div>Child2</div>)\n});\n\n\nfunction RemainInfo(props) {\n    console.log('RemainInfo, count: %d', props.stuffLeftCount);\n\n    // 60-3) context 불러오기\n    let remainStuff = useContext(remainContext);\n    return (\n\n        // <p>재고 : {props.stuffLeftCount}</p>\n        <p>재고 : {remainStuff[props.idx]}</p>\n    );\n}\n\n// 101-3) 추가 \nfunction DetailCart(state) {\n    return {\n        state: state.reducer\n\n    }\n}\n\n// 101-4) 변경\n// export default Detail;\nexport default connect(DetailCart)(Detail)"],"names":["박스","styled","제목","props","색상","TabContent","useEffect","selTabAniStartChange","selTabIndex","Parent","Child1","첫째아이","Child2","둘째아이","console","log","memo","RemainInfo","stuffLeftCount","remainStuff","useContext","remainContext","idx","connect","state","reducer","useState","alertSoldOut","alertSoldOutVisible","inputText","inputTextSave","changeSelTabIndex","selTabAniStart","soldOutVisibleTimer","setTimeout","clearTimeout","id","useParams","clickedProduct","stuff","find","product","count","history","useHistory","className","onChange","e","target","value","src","img","title","content","price","onClick","dispatch","type","payload","name","quan","push","goBack","variant","defaultActiveKey","eventKey","in","classNames","timeout"],"sourceRoot":""}